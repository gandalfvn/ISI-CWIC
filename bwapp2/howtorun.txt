./kill.sh [m]eteor
ps aux | grep meteor
git pull
./start.sh
tail -f nohup.out


====nginx ssl====
cat cert:
cat cwc-isi_org.crt COMODORSAAddTrustCA.crt COMODORSADomainValidationSecureServerCA.crt AddTrustExternalCARoot.crt > cwc-isi-bundle.crt
https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/789/37/certificate-installation-nginx

https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04

using http-server npm to serve the ssl cert verificaiton for our ssl
user must be root

    server {
      listen       80;
      server_name *.cwc-isi.org cwc-isi.org;
      #using this to serve ssl verification text file along with npm http-server - not needed if not creating new ssl cert
      location ~ /*.txt {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:8070;
      }
      location /{
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:4000;
      }
    }

    server {
      listen       443 ssl;
      server_name *.cwc-isi.org cwc-isi.org;

      ssl_certificate_key  /etc/nginx/ssl/cwc-isi.key;
      ssl_certificate   /etc/nginx/ssl/cwc-isi-bundle.crt;

      #enables all versions of TLS, but not SSLv2 or 3 which are weak and now deprecated.
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      
      #Disables all weak ciphers
      ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
      
      ssl_prefer_server_ciphers on;

      location /{
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:4000;
      }
    }